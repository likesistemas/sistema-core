name: PHP 8.0

on:
  push:
    branches:
      - master

    tags:
      - v*

  pull_request:

jobs:
  
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Prepare code
        run: |
          touch .env
          echo "VERSAO=80-dev" >> .env

      - name: Run tests dev 
        run: |
          docker-compose -f docker-compose-80.yml up --build -d
          
          echo $(docker run -t --network lemp jwilder/dockerize \
            -wait http://core_nginx/ \
            -timeout 60s)

          docker ps -a
          docker logs app

          CONTENT=$(curl -s "http://127.0.0.1/");
          APP_CONTENT=$(docker exec app app echo);

          echo "CHAMADA HTTP: ${CONTENT}";
          echo "CHAMADA APP: ${APP_CONTENT}";

          if [ "${CONTENT}" != "core|80" ]; then
            echo "Chamada HTTP retornou errado: ${CONTENT}"
            exit 1;
          fi

          if [ "${APP_CONTENT}" != "core|80" ]; then
            echo "Chamada APP retornou errado: ${APP_CONTENT}"
            exit 1;
          fi

          docker-compose -f docker-compose-80.yml down -v
      
      - name: Run tests prod
        run: |
          docker-compose -f docker-compose-80.yml up --build -d
          
          echo $(docker run -t --network lemp jwilder/dockerize \
            -wait http://core_nginx/ \
            -timeout 60s)

          docker ps -a
          docker logs app

          CONTENT=$(curl -s "http://127.0.0.1/");
          APP_CONTENT=$(docker exec app app echo);

          echo "CHAMADA HTTP: ${CONTENT}";
          echo "CHAMADA APP: ${APP_CONTENT}";

          if [ "${CONTENT}" != "core|80" ]; then
            echo "Chamada HTTP retornou errado: ${CONTENT}"
            exit 1;
          fi

          if [ "${APP_CONTENT}" != "core|80" ]; then
            echo "Chamada APP retornou errado: ${APP_CONTENT}"
            exit 1;
          fi

  push:
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1 
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}
      
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args: |
            VERSAO_PHP=likesistemas/php:80
          push: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          tags: |
            likesistemas/sistema-core:80
            likesistemas/sistema-core:8.0
            ghcr.io/likesistemas/sistema-core:80
            ghcr.io/likesistemas/sistema-core:8.0
